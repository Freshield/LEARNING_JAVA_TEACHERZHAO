Readme
.   命名
    每个作业新建一个Java文件
    文件名会在每个作业里有提示
    在文件里写 psvm 创建 public static void main
    然后在这里面写每个作业

.   作业说明
    >> 代表输入
    << 代表输出
    END 代表程序结束

    >>  1
    <<  12
    END
    代表用户输入 1 按回车 后 程序输出 12

.   加强
    写作业时，先写基础需求，不考虑加强里的约束或效果，
    写完后再尽力实现加强功能
    加强用 Question 1 + 加强名 显示
    加强版本不用创建新文件，在现有文件上直接改。
    加强版本按顺序做
    带* 代表不要求写出来，因为可能涉及到没有讲到的知识点

Question 1
.   文件名
    Question1

.   概要
    用户输入一个三位数，程序输出每一位的数

.   交互效果
    >>  319
    <<  3
    <<  1
    <<  9

.   约束
    假设用户输入的一定是一个合法三位数
    输出时按从高位到低位输出

.   提示
    / 和 % 运算符 联合使用

Question 1 + 四位
.   概要
    用书输入一个四位数，程序输出每一位的数

.   效果
    >>  3192
    <<  3
    <<  1
    <<  9
    <<  2

Question 2
.   文件名
    Question2

.   概要
    用户输入一个小数
    程序输出保留两位小数的数

.   效果
    >>  3.1415926
    <<  3.14

.   约束
    假设输入数是 [0, 10000) 范围内的小数
    假设用户输入的数，至少有2位小数
    保留两位小数时，不四舍五入，剩下的低位全部扔掉
    不可以使用 printf

Question 2 + Round
.   约束
    保留两位小数时，四舍五入
    假设 用户输入的 至少有3位小数

Question 2 + Round2
.   约束
    保留两位小数时，四舍五入
    用户可输入任何[0, 10000) 内的小数
    小数精度可能不到2位

Question 3
.   文件名
    Question3

.   概要
    用户输入一个整数
    程序输出补0的4位数

.   效果
    >>  31
    <<  0031

.   约束
    假设用户输入的，是 [0,9999] 之间任何整数
    不可以使用 printf

.   提示
    if
    System.out.print("00")

Question 4
.   文件名
    Question4

.   概要
    用户输入一个数
    程序输出对应 Morse Code

.   效果
    >>  1
    <<  .----

.   资料
    Morse Code 对应编码
    0   -----
    1   .----
    2   ..---
    3   ...--
    4   ....-
    5   .....
    6   -....
    7   --...
    8   ---..
    9   ----.

.   约束
    假设用户只输入 [0,5] 之间的整数
    不能使用 && 或者 ||
    只能使用 if / else，不能使用 else-if

.   提示
    if

Question 4 + Deep
.   约束
    if 嵌套的深度不能超过 3 层

Question 5
.   文件名
    Question5

.   概要
    用户输入3个数
    程序输出这三个里最大的数

.   效果
    >>  10
    >>  3
    >>  8
    <<  10

.   约束
    假设用户输入的数都是 [0,9999] 之间的整数

Question 5 + Single*
.   约束
    代码中 输出代码，比如下面的，只能出现一次，也就是只能写一次
    System.out.println()


Question 6
.   概要
    输入两个点的坐标
    输出构成的矩形

.   流程
    输入 第一个点的x坐标
    输入 第一个点的y坐标
    输入 第二个点的x坐标
    输入 第二个点的y坐标
    输出 宽和高

.   效果
    >>  1
    >>  1
    >>  4
    >>  5
    <<  3 4

.   约束
    所有点的 x y 为整数
    假设俩点的x坐标不一样，y坐标也不一样

Question 7
.   概要
    计算一个时间的合适显示

.   流程
    输入 一个时间秒数
    输出 合适的结果

    合适的结果会因为时间的大小而不同
    30 秒
    2 分钟
    2 小时
    1 天
    2 月

.   效果
    >>  3426
    <<  57 分钟

约束：
    输入秒数为正整数，范围不大于一年的时间
    默认 1个月 = 30天
    时间向下取整：23小时 显示23小时， 24小时 显示1天

Question 8
.   概要
    计算对打值

.   流程
    输入 第一个人的ATK
    输入 第一个人的DEF
    输入 第一个人的DEX
    输入 第一个人的AGL
    输入 第二个人的ATK
    输入 第二个人的DEF
    输入 第二个人的DEX
    输入 第二个人的AGL
    输出 第一个人打第二个人的时候的伤害值

.   效果
    >>  160 40 200 100
    >>  100 30 160 100
    <<  127

.   约束
    假设用户输入的8个属性值均小于等于200

.   公式
    步骤1
    实际ATK 是 攻击者 的 ATK
    实际DEF 是 防御者 的 DEF
    实际DEX 是 攻击者 的 DEX +-20%随机浮动
    实际AGL 是 防御者 的 AGL +-20%随机浮动

    步骤2 伤害值预算
    如果 实际ATK 大于 实际DEF 那么 伤害值 为 实际ATK - 实际DEF
    否则 伤害值 为 1

    步骤3 伤害值调整
    如果 实际DEX 大于 实际AGL 的 1.5 倍 则被认定为 形成暴击
    如果 实际DEX 小于 实际AGL 的 0.5 倍 则被认定为 攻击被闪躲
    其它情况 认定为 正常攻击

    如果 形成暴击 那么 伤害值在此基础上 乘以 2
    如果 攻击被闪躲 那么 伤害值 变为 0
    如果 正常攻击 伤害值在此基础上 +-10%随机浮动

    步骤4 伤害形成
    伤害值在 步骤2 和 步骤3 计算时采用 double 格式
    最终转成整型

.   提示
    Math.random() * 40 + 80




















.
